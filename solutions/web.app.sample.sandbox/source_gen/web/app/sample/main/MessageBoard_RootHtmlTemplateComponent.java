package web.app.sample.main;

/*Generated by MPS */

import jetbrains.mps.webr.runtime.templateComponent.TemplateComponent;
import java.util.Map;
import jetbrains.mps.webr.runtime.templateComponent.TemplateActionController;
import jetbrains.mps.webr.runtime.templateComponent.TemplateEventHandler;
import webr.framework.textBuilder.TBuilderContext;
import jetbrains.exodus.util.StringHashMap;
import jetbrains.mps.webr.htmlComponent.runtime.HtmlComponentUtil;
import webr.framework.function.HtmlStringUtil;
import jetbrains.mps.webr.runtime.util.ParameterUtil;
import jetbrains.mps.webr.runtime.templateComponent.BoundValue;
import jetbrains.mps.webr.runtime.templateComponent.ValuePopulator;
import jetbrains.mps.webr.runtime.templateComponent.ITemplateComponentProvider;
import jetbrains.mps.webr.runtime.requestProcessor.ResponseFactory;
import jetbrains.mps.webr.runtime.util.ContentBuilder;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.exodus.entitystore.Entity;
import jetbrains.teamsys.dnq.runtime.queries.QueryOperations;
import jetbrains.exodus.query.PropertyEqual;
import com.jetbrains.teamsys.dnq.database.EntityOperations;
import web.app.sample.sandbox.persistence.UserImpl;
import web.app.sample.sandbox.persistence.MessageImpl;
import com.jetbrains.teamsys.dnq.association.PrimitiveAssociationSemantics;
import webr.framework.controller.ControllerOperations;
import com.jetbrains.teamsys.dnq.association.DirectedAssociationSemantics;
import jetbrains.mps.webr.runtime.templateComponent.Widget;
import jetbrains.mps.webr.runtime.component.HtmlTemplate;

public class MessageBoard_RootHtmlTemplateComponent extends TemplateComponent {
  private String username;

  public MessageBoard_RootHtmlTemplateComponent(TemplateComponent parentTemplateComponent, String templateName, Map<String, Object> templateParameters) {
    super(null, parentTemplateComponent, templateName, templateParameters);
  }

  public MessageBoard_RootHtmlTemplateComponent(TemplateComponent parentTemplateComponent, String templateName) {
    super(null, parentTemplateComponent, templateName);
  }

  public MessageBoard_RootHtmlTemplateComponent(TemplateActionController templateActionController, String templateName, Map<String, Object> templateParameters) {
    super(templateActionController, null, templateName, templateParameters);
  }

  public MessageBoard_RootHtmlTemplateComponent(TemplateActionController templateActionController, TemplateComponent parentTemplateComponent, String templateName, Map<String, Object> templateParameters) {
    super(templateActionController, parentTemplateComponent, templateName, templateParameters);
  }

  public MessageBoard_RootHtmlTemplateComponent(Map<String, Object> templateParameters) {
    super(null, null, "MessageBoard", templateParameters);
  }

  public MessageBoard_RootHtmlTemplateComponent() {
    super(null, null, "MessageBoard");
  }

  protected void initEventHandlers() {
    this.addEventHandler(new TemplateEventHandler(this.getEventPath("methodCall_saveMessage")) {
      public void handle() {
        MessageBoard_RootHtmlTemplateComponent.this.saveMessage();
      }
    });
  }

  @Override
  protected void initTemplateProperties() {
    this.username = "Anonymous";

  }

  protected void renderTemplate(Map<String, Object> rootMap, final TBuilderContext builderContext) {
    builderContext.appendIndent();
    builderContext.append("<h1");
    builderContext.append(">Welcome to Message Board</h1>");
    builderContext.appendNewLine();
    {
      TemplateComponent childTemplateComponent;
      {
        final Map<String, Object> childTemplateParameters = new StringHashMap<Object>();
        TemplateComponent currentTemplateComponent = builderContext.getCurrentTemplateComponent();
        if (currentTemplateComponent != null) {
          String childTemplateName = "board";
          childTemplateComponent = builderContext.getOldChildTemplateComponent(childTemplateName);
          if (childTemplateComponent == null) {
            // Create child template
            childTemplateComponent = new Board_HtmlTemplateComponent(currentTemplateComponent, childTemplateName, childTemplateParameters);
          } else {
            // Update child template
            childTemplateComponent.setTemplateParameters(childTemplateParameters);
          }
        } else {
          childTemplateComponent = new Board_HtmlTemplateComponent(null, null, null, childTemplateParameters);
        }
        childTemplateComponent.setRefName("board");
      }
      TemplateComponent currentTemplateComponent = builderContext.getCurrentTemplateComponent();
      if (currentTemplateComponent != null) {
        currentTemplateComponent.addChildTemplateComponent(childTemplateComponent.getTemplateName(), childTemplateComponent);
      }
      TemplateComponent.buildTemplateComponent(childTemplateComponent, builderContext);
    }
    builderContext.appendIndent();
    builderContext.append("<div");
    builderContext.append(" cn=\"");
    builderContext.append(builderContext.getCurrentTemplateComponent().getRefPath("add"));
    builderContext.append("\"");
    HtmlComponentUtil.addTemplateParamAttributes(builderContext);
    builderContext.append(" id=\"");
    builderContext.append(HtmlStringUtil.html(builderContext.checkId("id", builderContext.getCurrentTemplateComponent().getFullLabeledInputName("add"))));
    builderContext.append("\"");
    builderContext.append(">");
    builderContext.appendNewLine();
    builderContext.increaseIndent();
    builderContext.appendIndent();
    builderContext.append("<div");
    builderContext.append(" class=\"jt-panel\"");
    builderContext.append(">");
    builderContext.appendNewLine();
    builderContext.increaseIndent();
    builderContext.appendIndent();
    builderContext.append("<div class=\"jt-panel-content\">");
    builderContext.appendNewLine();
    builderContext.increaseIndent();
    builderContext.appendIndent();
    builderContext.append("<div class=\"jt-fieldset-pair\"");
    builderContext.append(">");
    builderContext.appendNewLine();
    builderContext.increaseIndent();
    builderContext.appendIndent();
    builderContext.append("<label");
    builderContext.append(" cn=\"");
    builderContext.append(builderContext.getCurrentTemplateComponent().getRefPath("usernameLabel"));
    builderContext.append("\"");
    HtmlComponentUtil.addTemplateParamAttributes(builderContext);
    builderContext.append(" id=\"");
    builderContext.append(HtmlStringUtil.html(builderContext.checkId("id", builderContext.getCurrentTemplateComponent().getFullLabeledInputName("usernameLabel"))));
    builderContext.append("\"");
    builderContext.append(" for=\"");
    builderContext.append(ParameterUtil.getParameterString("id", builderContext.getCurrentTemplateComponent().getFullLabeledInputName("username")));
    builderContext.append("\">Username</label>");
    builderContext.appendNewLine();
    builderContext.appendIndent();
    builderContext.append("<input");
    builderContext.append(" name=\"");
    builderContext.append(HtmlStringUtil.html(ParameterUtil.getParameterStringWithPostDirect(builderContext.getCurrentTemplateComponent().getFullLabeledInputName("username"))));
    builderContext.append("\"");
    builderContext.append(" cn=\"");
    builderContext.append(builderContext.getCurrentTemplateComponent().getRefPath("username"));
    builderContext.append("\"");
    HtmlComponentUtil.addTemplateParamAttributes(builderContext);
    builderContext.append(" id=\"");
    builderContext.append(HtmlStringUtil.html(builderContext.checkId("id", builderContext.getCurrentTemplateComponent().getFullLabeledInputName("username"))));
    builderContext.append("\"");
    builderContext.append(" class=\"jt-input\"");
    builderContext.append(" type=\"text\" value=\"");
    builderContext.append(HtmlStringUtil.html(builderContext.getCurrentTemplateComponent().registerInputValue(BoundValue.create(username, new ValuePopulator() {
      public void populate(BoundValue _bv, final ITemplateComponentProvider builderContext) {
        BoundValue<String> __bv = (BoundValue<String>) _bv;
        username = __bv.getParameterValue(String.class);
      }
    }), ParameterUtil.getParameterStringWithPost(builderContext.getCurrentTemplateComponent().getFullLabeledInputName("username"), true), false)));
    builderContext.append("\"/>");
    builderContext.appendNewLine();
    builderContext.decreaseIndent();
    builderContext.appendIndent();
    builderContext.append("</div>");
    builderContext.appendNewLine();
    builderContext.appendIndent();
    builderContext.append("<div class=\"jt-fieldset-pair\"");
    builderContext.append(">");
    builderContext.appendNewLine();
    builderContext.increaseIndent();
    builderContext.appendIndent();
    builderContext.append("<label");
    builderContext.append(" cn=\"");
    builderContext.append(builderContext.getCurrentTemplateComponent().getRefPath("messageLabel"));
    builderContext.append("\"");
    HtmlComponentUtil.addTemplateParamAttributes(builderContext);
    builderContext.append(" id=\"");
    builderContext.append(HtmlStringUtil.html(builderContext.checkId("id", builderContext.getCurrentTemplateComponent().getFullLabeledInputName("messageLabel"))));
    builderContext.append("\"");
    builderContext.append(" for=\"");
    builderContext.append(ParameterUtil.getParameterString("id", builderContext.getCurrentTemplateComponent().getFullLabeledInputName("message")));
    builderContext.append("\">Message</label>");
    builderContext.appendNewLine();
    builderContext.appendIndent();
    builderContext.append("<textarea");
    builderContext.append(" name=\"");
    builderContext.append(HtmlStringUtil.html(ParameterUtil.getParameterStringWithPostDirect(builderContext.getCurrentTemplateComponent().getFullLabeledInputName("message"))));
    builderContext.append("\"");
    builderContext.append(" cn=\"");
    builderContext.append(builderContext.getCurrentTemplateComponent().getRefPath("message"));
    builderContext.append("\"");
    HtmlComponentUtil.addTemplateParamAttributes(builderContext);
    builderContext.append(" id=\"");
    builderContext.append(HtmlStringUtil.html(builderContext.checkId("id", builderContext.getCurrentTemplateComponent().getFullLabeledInputName("message"))));
    builderContext.append("\"");
    builderContext.append(" class=\"jt-input\"");
    builderContext.append(">");
    builderContext.append(HtmlStringUtil.html(builderContext.getCurrentTemplateComponent().registerInputValue(null, ParameterUtil.getParameterStringWithPost(builderContext.getCurrentTemplateComponent().getFullLabeledInputName("message"), true), false)));
    builderContext.append("</textarea>");
    builderContext.appendNewLine();
    builderContext.decreaseIndent();
    builderContext.appendIndent();
    builderContext.append("</div>");
    builderContext.appendNewLine();
    builderContext.appendIndent();
    builderContext.append("<div class=\"jt-fieldset-pair\"");
    builderContext.append(">");
    builderContext.appendNewLine();
    builderContext.increaseIndent();
    builderContext.appendIndent();
    builderContext.append("<button");
    builderContext.append(" cn=\"");
    builderContext.append(builderContext.getCurrentTemplateComponent().getRefPath("sendButton"));
    builderContext.append("\"");
    HtmlComponentUtil.addTemplateParamAttributes(builderContext);
    builderContext.append(" id=\"");
    builderContext.append(HtmlStringUtil.html(builderContext.checkId("id", builderContext.getCurrentTemplateComponent().getFullLabeledInputName("sendButton"))));
    builderContext.append("\"");
    builderContext.append(" class=\"jt-button\"");
    builderContext.append(">Send</button>");
    builderContext.appendNewLine();
    builderContext.decreaseIndent();
    builderContext.appendIndent();
    builderContext.append("</div>");
    builderContext.appendNewLine();
    builderContext.decreaseIndent();
    builderContext.appendIndent();
    builderContext.append("</div>");
    builderContext.appendNewLine();
    builderContext.decreaseIndent();
    builderContext.appendIndent();
    builderContext.append("</div>");
    builderContext.appendNewLine();
    builderContext.decreaseIndent();
    builderContext.appendIndent();
    builderContext.append("</div>");
    builderContext.appendNewLine();
  }

  protected void doBuildComponentTree(Map<String, Object> rootMap, final TBuilderContext builderContext) {
    {
      TemplateComponent childTemplateComponent;
      {
        final Map<String, Object> childTemplateParameters = new StringHashMap<Object>();
        TemplateComponent currentTemplateComponent = builderContext.getCurrentTemplateComponent();
        if (currentTemplateComponent != null) {
          String childTemplateName = "board";
          childTemplateComponent = builderContext.getOldChildTemplateComponent(childTemplateName);
          if (childTemplateComponent != null) {
            // Update child template
            childTemplateComponent.setTemplateParameters(childTemplateParameters);
          } else {
            // Create child template
            childTemplateComponent = new Board_HtmlTemplateComponent(currentTemplateComponent, childTemplateName, childTemplateParameters);
          }
          currentTemplateComponent.addChildTemplateComponent(childTemplateComponent.getTemplateName(), childTemplateComponent);
        } else {
          childTemplateComponent = new Board_HtmlTemplateComponent(childTemplateParameters);
        }
      }
      TemplateComponent.buildComponentTree(childTemplateComponent, builderContext);
    }
  }

  public void saveMessage() {
    if (isEmpty_etss2z_a0a0e(username)) {
      MessageBoard_RootHtmlTemplateComponent.this.addCommandResponse(ResponseFactory.getJsResponseFactory().getEvalResponse(ContentBuilder.toString(new _FunctionTypes._void_P1_E0<TBuilderContext>() {
        public void invoke(TBuilderContext builderContext) {
          builderContext.appendIndent();
          builderContext.appendIndent();
          builderContext.append("window.alert(\"Username is not set =(\");");
          builderContext.appendNewLine();
          builderContext.appendNewLine();
        }
      }, false, MessageBoard_RootHtmlTemplateComponent.this)));
      return;
    }
    Entity user = QueryOperations.getFirst(QueryOperations.query(null, "User", new PropertyEqual("name", username)));
    if (EntityOperations.equals(user, null)) {
      user = UserImpl.constructor(username);
    }
    Entity msg = MessageImpl.constructor();
    PrimitiveAssociationSemantics.setBlobWithFixedNewlines(msg, "content", ControllerOperations.getLabeledInputValue(MessageBoard_RootHtmlTemplateComponent.this.getWidget(ParameterUtil.getParameterString("message")).getWidgetId(), String.class));
    DirectedAssociationSemantics.setToOne(msg, "author", user);
    Widget.addCommandResponseSafe(((Board_HtmlTemplateComponent) TemplateComponent.getChildrenTemplateComponents(MessageBoard_RootHtmlTemplateComponent.this).get("board")), HtmlTemplate.refresh(((Board_HtmlTemplateComponent) TemplateComponent.getChildrenTemplateComponents(MessageBoard_RootHtmlTemplateComponent.this).get("board"))));
  }

  protected Map<String, Object> initTemplateParameters() {
    TemplateActionController action = this.templateActionController;
    if (action != null) {
      final Map<String, Object> rootMap = new StringHashMap<Object>();
      return rootMap;
    } else {
      return super.initTemplateParameters();
    }
  }

  public static boolean isEmpty_etss2z_a0a0e(String str) {
    return str == null || str.length() == 0;
  }
}
